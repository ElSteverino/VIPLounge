// MARK: Change Log
/***************************************************************************************************************************************
 
 VIPLoungeViewer.swift
 VIPLounge
 
 This file was generated by the Clean Swift Xcode Templates so you can apply clean architecture to your iOS and Mac projects,
 see http://clean-swift.com
 
 
 4/24/18 <sdm>
 â€¢ Initial Code
 
 ***************************************************************************************************************************************/

import Cocoa


// MARK: -
/*====================================================================================================================================*/

protocol VIPLoungeDisplayLogic: class {
        
    func displayVIPCodeView( viewModel: VIPLounge.Update.ViewModel )
    
}



// MARK: -
/*====================================================================================================================================*/

class VIPLoungeViewer: NSViewController, VIPLoungeDisplayLogic {
    
    var interactor: VIPLoungeBusinessLogic?
    var router: (NSObjectProtocol & VIPLoungeRoutingLogic & VIPLoungeDataPassing)?
    
    @IBOutlet weak var sceneNameField: NSTextField!
    @IBOutlet weak var useCaseField: NSTextField!
    @IBOutlet weak var requestField: NSTextField!
    @IBOutlet weak var requestTypeField: NSTextField!
    @IBOutlet weak var responseField: NSTextField!
    @IBOutlet weak var responseTypeField: NSTextField!
    @IBOutlet weak var viewModelField: NSTextField!
    @IBOutlet weak var viewModelTypeField: NSTextField!
    @IBOutlet weak var viewerMethodField: NSTextField!
    @IBOutlet weak var interactorMethodField: NSTextField!
    @IBOutlet weak var presenterMethodField: NSTextField!

    @IBOutlet weak var codeTextField: NSTextFieldCell!


    // MARK: - Object lifecycle
    /*====================================================================================================================================*/

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        
        setup( )
        
    }
    
    
    // MARK: Setup
    /*====================================================================================================================================*/
    
    private func setup( ) {
        
        let viewer = self
        let interactor = VIPLoungeInteractor( )
        let presenter = VIPLoungePresenter( )
        let router = VIPLoungeRouter( )
        
        viewer.interactor = interactor
        viewer.router = router
        interactor.presenter = presenter
        presenter.viewer = viewer
        router.viewer = viewer
        router.dataStore = interactor
    
    }

    
    private func setupTextFieldDelegates( ) {
        
        sceneNameField.delegate = self
        useCaseField.delegate = self
        requestField.delegate = self
        requestTypeField.delegate = self
        responseField.delegate = self
        responseTypeField.delegate = self
        viewModelField.delegate = self
        viewModelTypeField.delegate = self
        viewerMethodField.delegate = self
        interactorMethodField.delegate = self
        presenterMethodField.delegate = self
        
        sceneNameField.becomeFirstResponder()
        
    }
    
    
    // MARK: - Routing
    /*====================================================================================================================================*/

//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        
//        if let scene = segue.identifier {
//            
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                
//                router.perform(selector, with: segue)
//                
//            }
//        }
//    }
    
    
    // MARK: - View lifecycle
    /*====================================================================================================================================*/

    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        setupTextFieldDelegates( )
        doDisplayVIPCode()

    }
    
    override var representedObject: Any? {
        didSet {
            // Update the view, if already loaded.
        }
    }
    
    
    
    // MARK: - UseCase: doDisplayVIPCode
    /*====================================================================================================================================*/
    
    func doDisplayVIPCode( ) {
        let request = VIPLounge.Display.Request( )
        interactor?.displayInitialVIPCode(request: request )
        
    }
    
    
    // MARK: - UseCase: doUpdateVIPCode
    /*====================================================================================================================================*/
    
    func doUpdateVIPCode( ) {

        let request = VIPLounge.Update.Request(
        
            parameters: VIPLounge.Update.Parameters(
            
                sceneName: self.sceneNameField.stringValue,
                useCase: self.useCaseField.stringValue,
                request: self.requestField.stringValue,
                requestType: self.requestTypeField.stringValue,
                response: self.responseField.stringValue,
                responseType: self.responseTypeField.stringValue,
                viewModel: self.viewModelField.stringValue,
                viewModelType: self.viewModelTypeField.stringValue,
                viewerMethod: self.viewerMethodField.stringValue,
                interactorMethod: self.interactorMethodField.stringValue,
                presenterMethod: self.presenterMethodField.stringValue

            )
        )

        interactor?.updateVIPCode(request: request )
        
    }
    
    
    // MARK: - UseCase: VIP Code display logic
    /*====================================================================================================================================*/
    
    func displayVIPCodeView( viewModel: VIPLounge.Update.ViewModel ) {
        
        codeTextField.attributedStringValue = viewModel.vipCode
        
    }
    
}



// MARK: - NSTextFieldDelegate
/*==================================================================================================================================*/

extension VIPLoungeViewer: NSTextFieldDelegate {

    override func controlTextDidChange(_ obj: Notification) {

        doUpdateVIPCode( )

    }

}





// Public Domain, 2018 by Steve Marcotte
//
// Notwithstanding the foregoing, you may not use, copy, modify, merge, publish, distribute, sublicense, create a derivative work,
// and/or sell copies of the Software in any work that is designed, intended, or marketed for pedagogical or instructional purposes
// related to programming, coding, application development, or information technology.  Permission for such use, copying, modification,
// merger, publication, distribution, sublicensing, creation of derivative works, or sale is expressly withheld.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

